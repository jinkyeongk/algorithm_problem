#include <iostream>
#include <queue>
#include <vector>
#include <cstring>
using namespace std;

int map[9][9];
int maps[9][9];
int M,N;
int maxx;
struct node{
  int y,x;
};
int dir[4][2]={
  0,1,
  1,0,
  -1,0,
  0,-1
};


void bfs(){
  int ans=0;
  int visited[9][9]={false,};
  int changedMap[9][9];
  memcpy(changedMap,maps,sizeof(map));
  queue<node> q;
  
  for(int i =0 ; i < N;i++){
      for(int j = 0 ; j < M ;j++){
        if(changedMap[i][j]==2){ //바이러스 자리는 큐에 푸시
          q.push({i,j});
          visited[i][j] = true;
        }
      }
    }
  
  //바이러스 퍼뜨리기
  while(!q.empty()){
    node now = q.front();
    q.pop();
    
    for(int i =0 ; i< 4 ; i++){
      int dy = now.y + dir[i][0];
      int dx = now.x + dir[i][1];
      
      if(visited[dy][dx])continue;
      if(changedMap[dy][dx]==1)continue;
      if(dy < 0 || dx < 0 || dy >= N || dx >= M)continue;
      if(changedMap[dy][dx]==0)changedMap[dy][dx] = 2;
      visited[dy][dx] = true;
      q.push({dy,dx});
    }
  }
  
  //안전영역의 크기 체크
  for(int i =0 ; i < N;i++){
      for(int j = 0 ; j < M ;j++){
        if(changedMap[i][j]==0){
          ans++;
        }
      }
    }
  
  //안전영역 max 값 비교 후 값 업데이트
  maxx = max(maxx,ans);

}
void wall(int cnt){
  
  if(cnt == 3){
    bfs();
    return;
  }
   for(int i =0 ; i < N;i++){
      for(int j = 0 ; j < M ;j++){
        if(maps[i][j]==0){
          maps[i][j]=1;
          wall(cnt+1);
          maps[i][j] = 0;
        }
      }
    }
}
int main() 
{
    cin>>N>>M;
    
    for(int i =0 ; i < N;i++){
      for(int j = 0 ; j < M ;j++){
        cin >> map[i][j];
      }
    }
    
    for(int i =0 ; i < N;i++){
      for(int j = 0 ; j < M ;j++){
        if(map[i][j]==0){
          memcpy(maps,map,sizeof(map));
          maps[i][j]=1;
          wall(1);
          maps[i][j]=0;
        }
      }
    }
    
    
    cout<<maxx;
    
    return 0;
}