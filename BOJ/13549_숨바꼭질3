#include <iostream>
#include <queue>

#define MAX 100001

using namespace std;

int N,K;
int dp[MAX] ;
int dir[3]={2,1,-1};

void bfs(){
  
    queue <int> q;
    q.push(N);
    dp[N] = 0;
    
    
    while(!q.empty()){
      int now = q.front();
      q.pop();
      
       if(now == K) {
         cout<<dp[K];
         break;
        }
      
      for(int i = 0 ; i < 3 ;i++ ){
        int next,timer;
        
        if(i==0){
          next = now*2;
          timer = 0;
        }else{
          next = now+dir[i];
          timer = 1;
        }
        if(next >= 0 && next < MAX && dp[next] > dp[now]+timer){
          q.push(next);
          dp[next] = dp[now] + timer;
        }
      }
    }
}
int main() 
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    cin >> N >>K;
  fill_n(dp, MAX, 987654321);
    bfs();
    return 0;
}