#include <iostream>
#include <queue>

using namespace std;
struct node{
  int x,y;
};
int dir[4][2]={
  0,1,
  1,0,
  0,-1,
  -1,0
};
int N, M, K; //세로, 가로 , 음쓰개수
int r,c,maxx;
bool visited[101][101];
int map[101][101];
void BFS(int x, int y){
  queue<node> q;
  q.push({x,y});
  int cnt=1;
  visited[y][x] = true;
  while(!q.empty()){
    node now = q.front();
    q.pop();
    
    for(int i =0  ; i < 4 ; i ++ ){
      int dy = now.y + dir[i][0];
      int dx = now.x + dir[i][1];
      if(dy<1 || dx <1 || dy >N || dx > M)continue;
      if(visited[dy][dx])continue;
      if(map[dy][dx] == 0)continue;
      visited[dy][dx] = true;
      q.push({dx,dy});
      cnt++;
    }
  }
  if(maxx< cnt)maxx =cnt;
}
int main() 
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cin >> N >> M >> K;
    for(int i =0 ; i < K ; i ++ ){
      cin >> r >> c;
      map[r][c] = 1;
    }
    
    for(int i = 1 ; i <=N ; i++ ){
      for(int j = 1 ; j <= M ; j++ ){
        if(!visited[i][j] && map[i][j] == 1) BFS(j,i);
      }
    }
    
    cout<<maxx;
    return 0;
}